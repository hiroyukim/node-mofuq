#!/usr/bin/env node
'use strict';

var yaml    = require('js-yaml'),
    fs      = require('fs'),
    sprintf = require('sprintf').sprintf,
    program = require('commander'),
    log4js  = require('log4js'),
    logger  = log4js.getLogger();

program
    .usage('<filepath>')
    .option('-p, --params [params]', 'Set paramname',String)
    .parse(process.argv);

var filepath = program.args[0];
var params   = program.params;

if(!filepath) {
    program.help();
}

function create_progress_bar(progress) {
    progress = progress / 10;
    var array = [];
    for( var i=0; i < 10; i++ ) {
        array.push(
            ( i < progress ) ? '#' : '_'
        );
    }
    return '[' + array.join('') + ']';
}

function show_data(filepath,depth) {
    try {
        var data = yaml.safeLoad(fs.readFileSync(filepath, 'utf8'));
    } catch(e) {
        logger.error(e);
        return;
    }

    if(data.length == 0 ) {
        logger.error("No data.");
        return;
    }

    var space = function(depth) {
        var space = '';
        for(var i =0; i < depth; i++ ) {
            space += "            ";
        }
        return space;
    }(depth);

    var sum_hour = 0;
    var sum_progress = 0;
    for( var i in data ) {
        var outputs = [
            create_progress_bar(data[i].progress),
            sprintf("(%03d%%)",data[i].progress),
            sprintf("[%02dh]",data[i]['hour'] || 0),
            data[i].name
        ];

        if( params ) {
            var append_params = params.split(',');
            for( var key in append_params ) {
                outputs.push( '[' + ( data[i][append_params[key]] || 'undefined') + ']')
            }
        }

        console.log( space + outputs.join("\t"));
        sum_hour += data[i]['hour'] || 0;
        sum_progress += data[i].progress;

        if( data[i]['include'] ) {
            show_data(data[i]['include'],depth + 1);
        }
    }

    var sum_outputs = [
        "tasks: " + data.length,
        "hour: " + sum_hour,
        sprintf("progress: %d%%", parseInt( ( sum_progress / ( data.length * 100 ) ) * 100 ))
    ];

    for( var sum_outputs_index in sum_outputs ) {
        console.log( space + sum_outputs[sum_outputs_index] );
    }
}

show_data(filepath,0);
